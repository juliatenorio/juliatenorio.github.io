---
title: "Valentine's Day TidyTuesday" 
description: |
  Analysis of Valentine's Day Consumerism
author: Julia Aceron
date: September 18, 2024
format: html
execute:
  warning: false
  message: false
---

```{r echo = FALSE, include= FALSE}
library(tidyverse)
historical_spending <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-02-13/historical_spending.csv')
gifts_age <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-02-13/gifts_age.csv')
gifts_gender <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-02-13/gifts_gender.csv')
```

#### The following graph is from the historical spending dataset. It visualizes the percentage of people who celebrate Valentine's Day from 2010-2022

```{r}
ggplot(historical_spending, aes(x = Year, y = PercentCelebrating, fill = Year)) + # Uses historical_spending for ggplot
  geom_line() + # Defines x and y variables and groups color by year
  labs (
    x = "Year",
    y = "Percent of People Celebrating"
  ) + # Renames variables for clarity
  ggtitle("Trend of People who Celebrate Valentine's Day") + # Title for Graph
  theme_minimal() + # Creates theme for graph
  theme(
    plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),  # Center and bold the title
    plot.subtitle = element_text(hjust = 0.5, size = 12, face = "italic"),  # Subtitle formatting
    axis.title = element_text(face = "bold"),  # Bold axis labels
    axis.text = element_text(size = 12),  # Make axis text bigger
    panel.grid.major = element_line(color = "gray", size = 0.5),  # Lighter gridlines
    panel.grid.minor = element_blank(), # No minor gridlines
    legend.position = "none" # No Legend
    ) 

```
#### The next graph is an interactive map created using Shiny. It shows how much people spend based on different purposes (gifts, dates, etc.) over time. 

```{r}
library(shiny)

# Define UI for application that draws a histogram
ui <- fluidPage(

    # Application title
    titlePanel("Valentine's Day Interactive Map"),

    # Sidebar with a slider input for number of bins 
    sidebarLayout(
        sidebarPanel(
            uiOutput("year_slider_ui"),
            selectInput(
          inputId = "y_axis_variable",
          label = "Select a Variable to Plot (Money Spent on): ", 
          choices = c("Candy", "Flowers", "Jewelry", "GreetingCards", "EveningOut", "Clothing", "GiftCards"),
          selected = "Candy"
        )
        ),

        # Show a plot of the generated distribution
        mainPanel(
           textOutput("selected_years"),
           tableOutput("filtered_data"),
           plotOutput("valentines_plot")
        )
    )
)

# Define server logic required to draw a histogram
server <- function(input, output, session) {
  
  output$year_slider_ui <- renderUI({
    req(historical_spending)
    req(historical_spending$Year)
    
sliderInput(
  "year_slider", 
  "Select Year Range:", 
  min = min(historical_spending$Year, na.rm = TRUE),
  max = max(historical_spending$Year, na.rm = TRUE),
  value = c(min(historical_spending$Year, na.rm = TRUE), max(historical_spending$Year, na.rm = TRUE)),
              step = 1, sep = "")

 })
  
  filtered_data <- reactive({
    req(input$year_slider)
    historical_spending |> 
      filter(Year >= input$year_slider[1], Year <= input$year_slider[2])
  })
   output$selected_years <- renderText({
    req(input$year_slider)
    paste("Selected Year Range:", input$year_slider[1], "to", input$year_slider[2])
  })
  
  # Show the filtered dataset
  output$valentines_plot <- renderPlot({
    req(filtered_data())
    req(input$y_axis_variable)
    
    ggplot(filtered_data(), aes(x = Year, y = .data[[input$y_axis_variable]])) +
      geom_line(color = "pink") +
      geom_point(color = "darkgreen") +
      labs(
        title = paste("Year vs Price of", input$y_axis_variable),
        x = "Year",
        y = input$y_axis_variable
      ) +
      theme_minimal()
    
})
  
  output$filtered_data <- renderTable({
    filtered_data()
  })
  
}
# Run the application 
shinyApp(ui = ui, server = server)

```


TidyTuesday Dataset

[Valentine's Day Consumer Data](https://www.kaggle.com/datasets/infinator/happy-valentines-day-2022) 


